// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamLID.TravelExperts.Repository.Domain;

#nullable disable

namespace lf_egypt.App.Migrations
{
    [DbContext(typeof(TravelExpertsContext))]
    [Migration("20250502184709_UpdateDbStructure")]
    partial class UpdateDbStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Affiliations", b =>
                {
                    b.Property<string>("AffilitationId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AffDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AffilitationId")
                        .HasName("aaaaaAffiliations_PK");

                    b.HasIndex("AffilitationId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("AffilitationId"), false);

                    b.ToTable("Affiliations");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Agencies", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"));

                    b.Property<string>("AgncyAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyPostal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgncyProv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Agents", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("AgtBusPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AgtEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgtFirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AgtLastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AgtMiddleInitial")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("AgtPosition")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AgentId");

                    b.HasIndex("AgencyId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.BookingDetails", b =>
                {
                    b.Property<int>("BookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailId"));

                    b.Property<decimal?>("AgencyCommission")
                        .HasColumnType("money");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("money");

                    b.Property<int?>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ClassId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Destination")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeeId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("ItineraryNo")
                        .HasColumnType("float");

                    b.Property<int?>("ProductSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RegionId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("TripEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TripStart")
                        .HasColumnType("datetime");

                    b.HasKey("BookingDetailId")
                        .HasName("aaaaaBookingDetails_PK");

                    b.HasIndex("BookingDetailId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("BookingDetailId"), false);

                    b.HasIndex("BookingId")
                        .HasDatabaseName("BookingsBookingDetails");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ClassesBookingDetails");

                    b.HasIndex("FeeId")
                        .HasDatabaseName("FeesBookingDetails");

                    b.HasIndex("ProductSupplierId")
                        .HasDatabaseName("ProductSupplierId");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("DestinationsBookingDetails");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Bookings", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BookingNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("TravelerCount")
                        .HasColumnType("float");

                    b.Property<string>("TripTypeId")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("BookingId")
                        .HasName("aaaaaBookings_PK");

                    b.HasIndex("BookingId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("BookingId"), false);

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("CustomersBookings");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("PackagesBookings");

                    b.HasIndex("TripTypeId")
                        .HasDatabaseName("TripTypesBookings");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Classes", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ClassDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ClassId")
                        .HasName("aaaaaClasses_PK");

                    b.HasIndex("ClassId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ClassId"), false);

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.CreditCards", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardId"));

                    b.Property<DateTime>("Ccexpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("CCExpiry");

                    b.Property<string>("Ccname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CCName");

                    b.Property<string>("Ccnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CCNumber");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CreditCardId")
                        .HasName("aaaaaCreditCards_PK");

                    b.HasIndex("CreditCardId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CreditCardId"), false);

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("CustomersCreditCards");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("CustAddress")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("CustBusPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustCountry")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CustEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustFirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CustHomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustLastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CustPostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CustProv")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("CustomerId")
                        .HasName("aaaaaCustomers_PK");

                    b.HasIndex("AgentId")
                        .HasDatabaseName("EmployeesCustomers");

                    b.HasIndex("CustomerId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CustomerId"), false);

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_username_notnull")
                        .HasFilter("([username] IS NOT NULL)");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.CustomersRewards", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("RwdNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("CustomerId", "RewardId")
                        .HasName("aaaaaCustomers_Rewards_PK");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("CustomersCustomers_Rewards");

                    b.HasIndex("RewardId")
                        .HasDatabaseName("RewardsCustomers_Rewards");

                    b.HasIndex("CustomerId", "RewardId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CustomerId", "RewardId"), false);

                    b.ToTable("Customers_Rewards", (string)null);
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Fees", b =>
                {
                    b.Property<string>("FeeId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("FeeAmt")
                        .HasColumnType("money");

                    b.Property<string>("FeeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FeeId")
                        .HasName("aaaaaFees_PK");

                    b.HasIndex("FeeId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("FeeId"), false);

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Packages", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<decimal?>("PkgAgencyCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("PkgBasePrice")
                        .HasColumnType("money");

                    b.Property<string>("PkgDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PkgEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PkgName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PkgStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PackageId")
                        .HasName("aaaaaPackages_PK");

                    b.HasIndex("PackageId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("PackageId"), false);

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.PackagesProductsSuppliers", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSupplierId")
                        .HasColumnType("int");

                    b.HasKey("PackageId", "ProductSupplierId")
                        .HasName("aaaaaPackages_Products_Suppliers_PK");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("PackagesPackages_Products_Suppliers");

                    b.HasIndex("ProductSupplierId")
                        .HasDatabaseName("ProductSupplierId");

                    b.HasIndex("PackageId", "ProductSupplierId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("PackageId", "ProductSupplierId"), false);

                    b.ToTable("Packages_Products_Suppliers", (string)null);
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId")
                        .HasName("aaaaaProducts_PK");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ProductId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ProductId"), false);

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.ProductsSuppliers", b =>
                {
                    b.Property<int>("ProductSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSupplierId"));

                    b.Property<int?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductSupplierId")
                        .HasName("aaaaaProducts_Suppliers_PK");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ProductsProducts_Suppliers1");

                    b.HasIndex("ProductSupplierId")
                        .HasDatabaseName("ProductSupplierId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ProductSupplierId"), false);

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("SuppliersProducts_Suppliers1");

                    b.ToTable("Products_Suppliers", (string)null);
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Regions", b =>
                {
                    b.Property<string>("RegionId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("RegionId")
                        .HasName("aaaaaRegions_PK");

                    b.HasIndex("RegionId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RegionId"), false);

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Rewards", b =>
                {
                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<string>("RwdDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RwdName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RewardId")
                        .HasName("aaaaaRewards_PK");

                    b.HasIndex("RewardId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RewardId"), false);

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.SupplierContacts", b =>
                {
                    b.Property<int>("SupplierContactId")
                        .HasColumnType("int");

                    b.Property<string>("AffiliationId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SupConAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConBusPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupConCity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConCompany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConCountry")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConFax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupConFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupConLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupConPostal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConProv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupConUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SupConURL");

                    b.Property<int?>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("SupplierContactId")
                        .HasName("aaaaaSupplierContacts_PK");

                    b.HasIndex("AffiliationId")
                        .HasDatabaseName("AffiliationsSupCon");

                    b.HasIndex("SupplierContactId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SupplierContactId"), false);

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("SuppliersSupCon");

                    b.ToTable("SupplierContacts");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Suppliers", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SupplierId")
                        .HasName("aaaaaSuppliers_PK");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("SupplierId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SupplierId"), false);

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.TripTypes", b =>
                {
                    b.Property<string>("TripTypeId")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Ttname")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("TTName");

                    b.HasKey("TripTypeId")
                        .HasName("aaaaaTripTypes_PK");

                    b.HasIndex("TripTypeId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("TripTypeId"), false);

                    b.ToTable("TripTypes");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Agents", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Agencies", "Agency")
                        .WithMany("Agents")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_Agents_Agencies");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.BookingDetails", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Bookings", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BookingDetails_Bookings");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Classes", "Class")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_BookingDetails_Classes");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Fees", "Fee")
                        .WithMany("BookingDetails")
                        .HasForeignKey("FeeId")
                        .HasConstraintName("FK_BookingDetails_Fees");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.ProductsSuppliers", "ProductSupplier")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ProductSupplierId")
                        .HasConstraintName("FK_BookingDetails_Products_Suppliers");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Regions", "Region")
                        .WithMany("BookingDetails")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_BookingDetails_Regions");

                    b.Navigation("Booking");

                    b.Navigation("Class");

                    b.Navigation("Fee");

                    b.Navigation("ProductSupplier");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Bookings", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Customers", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Bookings_FK00");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Packages", "Package")
                        .WithMany("Bookings")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("Bookings_FK01");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.TripTypes", "TripType")
                        .WithMany("Bookings")
                        .HasForeignKey("TripTypeId")
                        .HasConstraintName("Bookings_FK02");

                    b.Navigation("Customer");

                    b.Navigation("Package");

                    b.Navigation("TripType");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.CreditCards", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Customers", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("CreditCards_FK00");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Customers", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Agents", "Agent")
                        .WithMany("Customers")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("FK_Customers_Agents");

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.CustomersRewards", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Customers", "Customer")
                        .WithMany("CustomersRewards")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("Customers_Rewards_FK00");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Rewards", "Reward")
                        .WithMany("CustomersRewards")
                        .HasForeignKey("RewardId")
                        .IsRequired()
                        .HasConstraintName("Customers_Rewards_FK01");

                    b.Navigation("Customer");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.PackagesProductsSuppliers", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Packages", "Package")
                        .WithMany("PackagesProductsSuppliers")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("Packages_Products_Supplie_FK00");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.ProductsSuppliers", "ProductSupplier")
                        .WithMany("PackagesProductsSuppliers")
                        .HasForeignKey("ProductSupplierId")
                        .IsRequired()
                        .HasConstraintName("Packages_Products_Supplie_FK01");

                    b.Navigation("Package");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.ProductsSuppliers", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Products", "Product")
                        .WithMany("ProductsSuppliers")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Products_Suppliers_FK00");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Suppliers", "Supplier")
                        .WithMany("ProductsSuppliers")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("Products_Suppliers_FK01");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.SupplierContacts", b =>
                {
                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Affiliations", "Affiliation")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("AffiliationId")
                        .HasConstraintName("SupplierContacts_FK00");

                    b.HasOne("TeamLID.TravelExperts.Repository.Domain.Suppliers", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("SupplierContacts_FK01");

                    b.Navigation("Affiliation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Affiliations", b =>
                {
                    b.Navigation("SupplierContacts");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Agencies", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Agents", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Bookings", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Classes", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Customers", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreditCards");

                    b.Navigation("CustomersRewards");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Fees", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Packages", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PackagesProductsSuppliers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Products", b =>
                {
                    b.Navigation("ProductsSuppliers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.ProductsSuppliers", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("PackagesProductsSuppliers");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Regions", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Rewards", b =>
                {
                    b.Navigation("CustomersRewards");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.Suppliers", b =>
                {
                    b.Navigation("ProductsSuppliers");

                    b.Navigation("SupplierContacts");
                });

            modelBuilder.Entity("TeamLID.TravelExperts.Repository.Domain.TripTypes", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
